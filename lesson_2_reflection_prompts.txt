What happens when you initialize a repository? Why do you need to do it?

The hidden directory .git is created which is needed as a place to store the git metadata. If you don't initialize the repository, git won't see the directory as a repository and no command will work on it.	

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area stands between the working directory and the repository. It serves as a place to collect files which should be put into the repository with their newest changes.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area contains all changes that will get committed with the next "git commit".
By running "git diff --staged", I can see all the differences to the last commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful if you want to add a slightly altered version to your product 
or introduce an experimental feature. Branches would help by keeping references to all 
versions including your "main" version in the master branch.

How do the diagrams help you visualize the branch structure?

They show the hierarchy of commits, show each commit's parent and therefore also make
it possible to see unreachable commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two commits together is a new commit which contains all of the changes
of both source commits. The new commit has both of the previous commits as a parent.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Pros of automatic merging:

You don't need to go through each and every simple conflict

Cons:

If you go too far with the idea of automatic merging, you might end up with invalid code.